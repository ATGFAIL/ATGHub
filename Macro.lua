-- MacroModule.lua
-- ModuleScript: ‡πÅ‡∏õ‡∏•‡∏á‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ require ‡πÑ‡∏î‡πâ
local MacroModule = {}
MacroModule.__index = MacroModule

-- ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô state (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà global)
local recording = false
local playing = false
local macroData = {}
local startTime = 0
local looping = false
local hookInstalled = false
local oldNamecall = nil

local eventsCount = 0
local durationTime = 0

local BASE_FOLDER = "ATGHUB_Macro"
local SUB_FOLDER = BASE_FOLDER .. "/Anime Last Stand"

-- dependencies (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏ã‡πá‡∏ï‡πÇ‡∏î‡∏¢ Init)
local Tabs, Fluent, HttpService, StatusUpdater

-- public: ‡πÄ‡∏Å‡πá‡∏ö UI objects ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô (‡πÉ‡∏´‡πâ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏≠‡πà‡∏≤‡∏ô/‡πÅ‡∏Å‡πâ‡πÑ‡∏î‡πâ)
MacroModule.Options = {}

-- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö/‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
local function ensureMacroFolders()
    pcall(function()
        if makefolder then
            if isfolder then
                if not isfolder(BASE_FOLDER) then
                    makefolder(BASE_FOLDER)
                end
                if not isfolder(SUB_FOLDER) then
                    makefolder(SUB_FOLDER)
                end
            else
                makefolder(BASE_FOLDER)
                makefolder(SUB_FOLDER)
            end
        end
    end)
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó status (‡πÉ‡∏ä‡πâ StatusUpdater ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ, ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏à‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó Tabs.Main ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ô pcall)
local function updateStatus()
    local text = string.format("üìä Events: %d\n‚è±Ô∏è Duration: %.3fs\nüîó Hook: %s", eventsCount, durationTime, (hookInstalled and "Active ‚úì" or "Inactive ‚úó"))
    if StatusUpdater and type(StatusUpdater) == "function" then
        pcall(StatusUpdater, text)
        return
    end
    if Tabs and Tabs.Main then
        pcall(function()
            -- ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            Tabs.Main:GetChildren()[1]:GetChildren()[1]:GetChildren()[2]:SetValue(text)
        end)
    end
end

-- Serialize / Deserialize arguments
local function serializeArg(arg)
    local argType = typeof(arg)
    if argType == "Instance" then
        return { type = "Instance", path = arg:GetFullName(), className = arg.ClassName }
    elseif argType == "CFrame" then
        return { type = "CFrame", components = {arg:GetComponents()} }
    elseif argType == "Vector3" then
        return { type = "Vector3", x = arg.X, y = arg.Y, z = arg.Z }
    elseif argType == "Color3" then
        return { type = "Color3", r = arg.R, g = arg.G, b = arg.B }
    elseif argType == "table" then
        local serialized = {}
        for k, v in pairs(arg) do serialized[k] = serializeArg(v) end
        return { type = "table", data = serialized }
    else
        return { type = argType, value = arg }
    end
end

local function deserializeArg(data)
    if type(data) ~= "table" or not data.type then return data end
    if data.type == "Instance" then
        local success, result = pcall(function()
            local obj = game
            for part in data.path:gmatch("[^.]+") do
                if part ~= "game" then
                    obj = obj:WaitForChild(part, 3)
                end
            end
            return obj
        end)
        return success and result or nil
    elseif data.type == "CFrame" then
        return CFrame.new(unpack(data.components))
    elseif data.type == "Vector3" then
        return Vector3.new(data.x, data.y, data.z)
    elseif data.type == "Color3" then
        return Color3.new(data.r, data.g, data.b)
    elseif data.type == "table" then
        local result = {}
        for k, v in pairs(data.data) do result[k] = deserializeArg(v) end
        return result
    else
        return data.value
    end
end

-- ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Hook ‡πÅ‡∏ö‡∏ö SimpleSpy
function MacroModule.InstallHook()
    if hookInstalled then return true end
    local ok, err = pcall(function()
        -- require hookmetamethod & getnamecallmethod ‡πÉ‡∏ô exploit environment
        oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
            local method = getnamecallmethod()
            local args = {...}

            if (method == "FireServer" or method == "InvokeServer") and recording then
                if (self and (self:IsA and (self:IsA("RemoteEvent") or self:IsA("RemoteFunction")))) then
                    local currentTime = tick() - startTime
                    local serializedArgs = {}
                    for i, arg in ipairs(args) do serializedArgs[i] = serializeArg(arg) end

                    table.insert(macroData, {
                        time = currentTime,
                        remoteName = self.Name,
                        remotePath = self:GetFullName(),
                        remoteType = method,
                        args = serializedArgs
                    })

                    eventsCount = #macroData
                    durationTime = currentTime
                    updateStatus()
                end
            end

            -- ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å
            return oldNamecall(self, ...)
        end)

        hookInstalled = true
        return true
    end)
    if not ok then
        warn("‚ö†Ô∏è Hook installation failed: " .. tostring(err))
        return false
    end
    updateStatus()
    return true
end

-- ‡πÄ‡∏•‡πà‡∏ô‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£ (loop ‡∏ñ‡πâ‡∏≤ loop = true)
function MacroModule.PlayMacro(loop)
    if #macroData == 0 then
        if Fluent then
            pcall(function()
                Fluent:Notify({ Title = "Macro System", Content = "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏ô!", Duration = 3 })
            end)
        end
        return
    end

    playing = true
    looping = loop or false

    task.spawn(function()
        repeat
            local playStart = tick()
            for _, action in ipairs(macroData) do
                if not playing then break end

                local targetTime = playStart + action.time
                local waitTime = targetTime - tick()
                if waitTime > 0 then task.wait(waitTime) end
                if not playing then break end

                pcall(function()
                    local remote = game
                    for part in action.remotePath:gmatch("[^.]+") do
                        if part ~= "game" then
                            remote = remote:FindFirstChild(part) or remote:WaitForChild(part, 2)
                        end
                    end
                    if remote then
                        local deserializedArgs = {}
                        for i, arg in ipairs(action.args) do deserializedArgs[i] = deserializeArg(arg) end
                        if action.remoteType == "FireServer" and remote.FireServer then
                            remote:FireServer(unpack(deserializedArgs))
                        elseif action.remoteType == "InvokeServer" and remote.InvokeServer then
                            remote:InvokeServer(unpack(deserializedArgs))
                        end
                    end
                end)
            end

            if looping and playing then task.wait(0.5) end
        until not looping or not playing

        playing = false
    end)
end

function MacroModule.StopPlaying()
    looping = false
    playing = false
    MacroModule.Options.AutoPlayToggle and MacroModule.Options.AutoPlayToggle:SetValue(false)
end

-- Save macro ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏õ clipboard
function MacroModule.SaveMacro(filename)
    if #macroData == 0 then
        pcall(function() if Fluent then Fluent:Notify({ Title = "Macro System", Content = "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å!", Duration = 3 }) end end)
        return false
    end
    if not filename or filename == "" then
        pcall(function() if Fluent then Fluent:Notify({ Title = "Macro System", Content = "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå!", Duration = 3 }) end end)
        return false
    end

    ensureMacroFolders()
    local success, result = pcall(function()
        local data = { macroData = macroData, timestamp = os.time(), totalEvents = #macroData, totalDuration = durationTime }
        local json = HttpService:JSONEncode(data)
        if writefile then
            local fullPath = SUB_FOLDER .. "/" .. filename .. ".json"
            writefile(fullPath, json)
            return true
        else
            setclipboard(json)
            return "clipboard"
        end
    end)

    if success then
        if result == "clipboard" then
            pcall(function() if Fluent then Fluent:Notify({ Title = "Macro System", Content = "üìã ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß! ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ö‡∏≠‡∏£‡πå‡∏î", Duration = 5 }) end end)
        else
            pcall(function() if Fluent then Fluent:Notify({ Title = "Macro System", Content = "üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", Duration = 3 }) end end)
        end
        return true
    else
        pcall(function() if Fluent then Fluent:Notify({ Title = "Macro System", Content = "‚ùå ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: " .. tostring(result), Duration = 5 }) end end)
        return false
    end
end

-- Load macro ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
function MacroModule.LoadMacro(filename)
    if not filename or filename == "" then
        pcall(function() if Fluent then Fluent:Notify({ Title = "Macro System", Content = "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå!", Duration = 3 }) end end)
        return false
    end

    local success, result = pcall(function()
        if readfile then
            local fullPath = SUB_FOLDER .. "/" .. filename .. ".json"
            if isfile and not isfile(fullPath) then
                return nil, "‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏û‡∏ö"
            end
            local content = readfile(fullPath)
            local data = HttpService:JSONDecode(content)
            return data
        else
            return nil, "‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö"
        end
    end)

    if success and result then
        macroData = result.macroData or {}
        eventsCount = #macroData
        durationTime = result.totalDuration or 0
        updateStatus()
        pcall(function() if Fluent then Fluent:Notify({ Title = "Macro System", Content = "‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", Duration = 3 }) end end)
        return true
    else
        pcall(function() if Fluent then Fluent:Notify({ Title = "Macro System", Content = "‚ùå ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: " .. tostring(result), Duration = 5 }) end end)
        return false
    end
end

-- ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
function MacroModule.GetMacroFiles()
    ensureMacroFolders()
    if not listfiles then return {"‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå"} end
    local files = {}
    local ok, res = pcall(function()
        local all = listfiles(SUB_FOLDER)
        for _, file in pairs(all) do
            local name = file:match("([^/\\]+)%.json$")
            if name and name ~= "" then table.insert(files, name) end
        end
        return files
    end)
    if ok and #res > 0 then return res end
    return {"‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ"}
end

-- ‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡πÉ‡∏ô Tabs.Macro ‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡∏Å callback (Init ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å)
function MacroModule.SetupUI()
    assert(Tabs and Tabs.Macro, "MacroModule.Init: ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á Tabs ‡∏ó‡∏µ‡πà‡∏°‡∏µ Tabs.Macro")

    local Section = Tabs.Macro:AddSection("Macro")

    MacroModule.Options.FilenameInput = Tabs.Macro:AddInput("FilenameInput", {
        Title = "‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå",
        Default = "",
        Placeholder = "‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ .json)",
        Numeric = false,
        Finished = false,
    })

    MacroModule.Options.FileDropdown = Tabs.Macro:AddDropdown("FileDropdown", {
        Title = "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£",
        Values = MacroModule.GetMacroFiles(),
        Multi = false,
        Default = 1,
    })

    Tabs.Macro:AddButton({
        Title = "üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£",
        Description = "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå",
        Callback = function()
            local filename = MacroModule.Options.FilenameInput.Value
            if filename == "" or not filename then
                filename = os.date("macro_%Y%m%d_%H%M%S")
            end
            MacroModule.SaveMacro(filename)
            pcall(function() MacroModule.Options.FileDropdown:SetValues(MacroModule.GetMacroFiles()) end)
        end
    })

    MacroModule.Options.RecordToggle = Tabs.Macro:AddToggle("RecordToggle", {
        Title = "‚è∫Ô∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£",
        Description = "‡πÄ‡∏£‡∏¥‡πà‡∏°/‡∏´‡∏¢‡∏∏‡∏î ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£",
        Default = false
    })

    MacroModule.Options.RecordToggle:OnChanged(function()
        if MacroModule.Options.RecordToggle.Value then
            if not hookInstalled then
                if not MacroModule.InstallHook() then
                    pcall(function() if Fluent then Fluent:Notify({ Title = "Macro System", Content = "‚ùå ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Hook ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", Duration = 3 }) end end)
                    MacroModule.Options.RecordToggle:SetValue(false)
                    return
                end
            end
            recording = true
            macroData = {}
            startTime = tick()
            eventsCount = 0
            durationTime = 0
            updateStatus()
            pcall(function() if Fluent then Fluent:Notify({ Title = "Macro System", Content = "üé¨ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£‡πÅ‡∏•‡πâ‡∏ß", Duration = 2 }) end end)
        else
            recording = false
            pcall(function() if Fluent then Fluent:Notify({ Title = "Macro System", Content = string.format("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: %d events", #macroData), Duration = 3 }) end end)
            updateStatus()
        end
    end)

    MacroModule.Options.AutoPlayToggle = Tabs.Macro:AddToggle("AutoPlayToggle", {
        Title = "üîÅ ‡πÄ‡∏•‡πà‡∏ô‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
        Description = "‡πÄ‡∏•‡πà‡∏ô‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î",
        Default = false
    })

    MacroModule.Options.AutoPlayToggle:OnChanged(function()
        if MacroModule.Options.AutoPlayToggle.Value then
            if not playing then
                MacroModule.PlayMacro(true)
                pcall(function() if Fluent then Fluent:Notify({ Title = "Macro System", Content = "üîÅ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£‡πÅ‡∏ö‡∏ö‡∏ß‡∏ô‡∏•‡∏π‡∏õ", Duration = 2 }) end end)
            end
        else
            MacroModule.StopPlaying()
            pcall(function() if Fluent then Fluent:Notify({ Title = "Macro System", Content = "‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡πà‡∏ô‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£", Duration = 2 }) end end)
        end
    end)

    Tabs.Macro:AddButton({
        Title = "‚ñ∂Ô∏è ‡πÄ‡∏•‡πà‡∏ô‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£",
        Description = "‡πÄ‡∏•‡πà‡∏ô‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏≠‡∏ö",
        Callback = function()
            if playing then
                pcall(function() if Fluent then Fluent:Notify({ Title = "Macro System", Content = "‚è∏Ô∏è ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡πà‡∏ô‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß", Duration = 2 }) end end)
                MacroModule.StopPlaying()
                MacroModule.Options.AutoPlayToggle:SetValue(false)
            else
                MacroModule.PlayMacro(false)
                pcall(function() if Fluent then Fluent:Notify({ Title = "Macro System", Content = "‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏≠‡∏ö", Duration = 2 }) end end)
            end
        end
    })

    Tabs.Macro:AddButton({
        Title = "üìÇ ‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£",
        Description = "‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå",
        Callback = function()
            local selectedFile = MacroModule.Options.FileDropdown.Value
            if selectedFile and selectedFile ~= "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ" and selectedFile ~= "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå" then
                MacroModule.LoadMacro(selectedFile)
            else
                pcall(function() if Fluent then Fluent:Notify({ Title = "Macro System", Content = "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", Duration = 3 }) end end)
            end
        end
    })

    Tabs.Macro:AddButton({
        Title = "üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
        Description = "‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
        Callback = function()
            macroData = {}
            eventsCount = 0
            durationTime = 0
            updateStatus()
        end
    })

    Tabs.Macro:AddButton({
        Title = "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå",
        Description = "‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£ (‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå ATGHUB_Macro/Anime Last Stand)",
        Callback = function()
            pcall(function() MacroModule.Options.FileDropdown:SetValues(MacroModule.GetMacroFiles()) end)
            pcall(function() if Fluent then Fluent:Notify({ Title = "Macro System", Content = "üîÑ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß", Duration = 2 }) end end)
        end
    })
end

-- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏°‡∏î‡∏π‡∏•: ‡∏™‡πà‡∏á dependencies ‡πÄ‡∏õ‡πá‡∏ô table
-- ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á dependencies: { Tabs = Tabs, Fluent = Fluent, HttpService = game:GetService("HttpService"), StatusUpdater = function(txt) ... end }
function MacroModule.Init(deps)
    assert(type(deps) == "table", "MacroModule.Init expects a table of dependencies")
    Tabs = deps.Tabs
    Fluent = deps.Fluent
    HttpService = deps.HttpService or game:GetService("HttpService")
    StatusUpdater = deps.StatusUpdater

    -- ‡∏™‡∏£‡πâ‡∏≤‡∏á UI
    MacroModule.SetupUI()
    updateStatus()

    -- ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ module (‡∏û‡∏£‡πâ‡∏≠‡∏° Options)
    return MacroModule
end

-- ‡∏ú‡∏•‡∏±‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å (‡πÉ‡∏´‡πâ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ)
function MacroModule.GetState()
    return {
        recording = recording,
        playing = playing,
        macroData = macroData,
        eventsCount = eventsCount,
        durationTime = durationTime,
        hookInstalled = hookInstalled
    }
end

-- expose ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏£‡∏á‡πÜ)
MacroModule.StartRecording = function() if not hookInstalled then MacroModule.InstallHook() end; MacroModule.Options.RecordToggle:SetValue(true) end
MacroModule.StopRecording  = function() MacroModule.Options.RecordToggle:SetValue(false) end
MacroModule.GetMacroFiles = MacroModule.GetMacroFiles
MacroModule.SaveMacro = MacroModule.SaveMacro
MacroModule.LoadMacro = MacroModule.LoadMacro
MacroModule.PlayOnce = function() MacroModule.PlayMacro(false) end
MacroModule.PlayLoop = function() MacroModule.PlayMacro(true) end
MacroModule.Stop = MacroModule.StopPlaying
MacroModule.InstallHook = MacroModule.InstallHook
MacroModule.UpdateStatus = updateStatus

return MacroModule
