-- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ UI ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡∏ö‡∏•‡πá‡∏≠‡∏Å (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Settings ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á FileDropdown ‡πÑ‡∏î‡πâ)
local FilenameInput
local FileDropdown

-- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏´‡∏•‡∏±‡∏Å
local recording = false
local playing = false
local macroData = {}
local startTime = 0
local looping = false
local hookInstalled = false
local oldNamecall

-- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
local statusText = "üü¢ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
local eventsCount = 0
local durationTime = 0

-- ‡∏û‡∏≤‡∏ò‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£
local BASE_FOLDER = "ATGHUB_Macro"
local SUB_FOLDER = BASE_FOLDER .. "/Anime Last Stand"

-- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô makefolder)
local function ensureMacroFolders()
    pcall(function()
        if makefolder then
            -- ‡∏ñ‡πâ‡∏≤ isfolder ‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á (‡∏ö‡∏≤‡∏á exploit ‡∏°‡∏µ‡∏ö‡∏≤‡∏á‡∏≠‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ)
            if isfolder then
                if not isfolder(BASE_FOLDER) then
                    makefolder(BASE_FOLDER)
                end
                if not isfolder(SUB_FOLDER) then
                    makefolder(SUB_FOLDER)
                end
            else
                -- ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ isfolder ‡πÅ‡∏ï‡πà‡∏°‡∏µ makefolder ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÑ‡∏ß‡πâ
                makefolder(BASE_FOLDER)
                makefolder(SUB_FOLDER)
            end
        end
    end)
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á Arguments
local function serializeArg(arg)
    local argType = typeof(arg)
    
    if argType == "Instance" then
        return {
            type = "Instance",
            path = arg:GetFullName(),
            className = arg.ClassName
        }
    elseif argType == "CFrame" then
        return {
            type = "CFrame",
            components = {arg:GetComponents()}
        }
    elseif argType == "Vector3" then
        return {
            type = "Vector3",
            x = arg.X, y = arg.Y, z = arg.Z
        }
    elseif argType == "Color3" then
        return {
            type = "Color3",
            r = arg.R, g = arg.G, b = arg.B
        }
    elseif argType == "table" then
        local serialized = {}
        for k, v in pairs(arg) do
            serialized[k] = serializeArg(v)
        end
        return {
            type = "table",
            data = serialized
        }
    else
        return {
            type = argType,
            value = arg
        }
    end
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏•‡∏±‡∏ö
local function deserializeArg(data)
    if type(data) ~= "table" or not data.type then
        return data
    end
    
    if data.type == "Instance" then
        local success, result = pcall(function()
            local obj = game
            for part in data.path:gmatch("[^.]+") do
                if part ~= "game" then
                    obj = obj:WaitForChild(part, 3)
                end
            end
            return obj
        end)
        return success and result or nil
    elseif data.type == "CFrame" then
        return CFrame.new(unpack(data.components))
    elseif data.type == "Vector3" then
        return Vector3.new(data.x, data.y, data.z)
    elseif data.type == "Color3" then
        return Color3.new(data.r, data.g, data.b)
    elseif data.type == "table" then
        local result = {}
        for k, v in pairs(data.data) do
            result[k] = deserializeArg(v)
        end
        return result
    else
        return data.value
    end
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Hook ‡πÅ‡∏ö‡∏ö SimpleSpy
local function installHook()
    if hookInstalled then return true end
    
    local success, err = pcall(function()
        -- ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£ Hook ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö SimpleSpy
        oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
            local method = getnamecallmethod()
            local args = {...}
            
            -- ‡∏à‡∏±‡∏ö FireServer ‡πÅ‡∏•‡∏∞ InvokeServer
            if (method == "FireServer" or method == "InvokeServer") and recording then
                if self:IsA("RemoteEvent") or self:IsA("RemoteFunction") then
                    local currentTime = tick() - startTime
                    local serializedArgs = {}
                    
                    -- Serialize arguments
                    for i, arg in ipairs(args) do
                        serializedArgs[i] = serializeArg(arg)
                    end
                    
                    -- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                    table.insert(macroData, {
                        time = currentTime,
                        remoteName = self.Name,
                        remotePath = self:GetFullName(),
                        remoteType = method,
                        args = serializedArgs
                    })
                    
                    -- ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI
                    eventsCount = #macroData
                    durationTime = currentTime
                    
                    -- ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Paragraph (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                    if Tabs.Main then
                        local successSet = pcall(function()
                            Tabs.Main:GetChildren()[1]:GetChildren()[1]:GetChildren()[2]:SetValue(
                                string.format("üìä Events: %d\n‚è±Ô∏è Duration: %.3fs\nüîó Hook: Active ‚úì", eventsCount, durationTime)
                            )
                        end)
                    end
                end
            end
            
            -- ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á Server ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
            return oldNamecall(self, ...)
        end)
        
        hookInstalled = true
        return true
    end)
    
    if not success then
        warn("‚ö†Ô∏è Hook installation failed: " .. tostring(err))
        return false
    end
    
    return true
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡πà‡∏ô‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£
local function playMacro(loop)
    if #macroData == 0 then
        Fluent:Notify({
            Title = "Macro System",
            Content = "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏ô!",
            Duration = 3
        })
        return
    end
    
    playing = true
    looping = loop or false
    
    task.spawn(function()
        repeat
            local playStart = tick()
            
            for i, action in ipairs(macroData) do
                if not playing then break end
                
                -- ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤
                local targetTime = playStart + action.time
                local waitTime = targetTime - tick()
                if waitTime > 0 then
                    task.wait(waitTime)
                end
                
                if not playing then break end
                
                -- ‡πÄ‡∏•‡πà‡∏ô Remote
                local success, err = pcall(function()
                    local remote = game
                    for part in action.remotePath:gmatch("[^.]+") do
                        if part ~= "game" then
                            remote = remote:FindFirstChild(part) or remote:WaitForChild(part, 2)
                        end
                    end
                    
                    if remote then
                        local deserializedArgs = {}
                        for i, arg in ipairs(action.args) do
                            deserializedArgs[i] = deserializeArg(arg)
                        end
                        
                        if action.remoteType == "FireServer" then
                            remote:FireServer(unpack(deserializedArgs))
                        else
                            remote:InvokeServer(unpack(deserializedArgs))
                        end
                    end
                end)
            end
            
            if looping and playing then
                task.wait(0.5)
            end
        until not looping or not playing
        
        playing = false
    end)
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå (‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô ATGHUB_Macro/Anime Last Stand/<filename>.json)
local function saveMacro(filename)
    if #macroData == 0 then
        Fluent:Notify({
            Title = "Macro System",
            Content = "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å!",
            Duration = 3
        })
        return false
    end
    
    if not filename or filename == "" then
        Fluent:Notify({
            Title = "Macro System",
            Content = "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå!",
            Duration = 3
        })
        return false
    end
    
    ensureMacroFolders()
    
    local success, result = pcall(function()
        local data = {
            macroData = macroData,
            timestamp = os.time(),
            totalEvents = #macroData,
            totalDuration = durationTime
        }
        
        local json = HttpService:JSONEncode(data)
        
        if writefile then
            -- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
            local fullPath = SUB_FOLDER .. "/" .. filename .. ".json"
            writefile(fullPath, json)
            return true
        else
            -- ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å
            setclipboard(json)
            return "clipboard"
        end
    end)
    
    if success then
        if result == "clipboard" then
            Fluent:Notify({
                Title = "Macro System",
                Content = "üìã ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß! ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ö‡∏≠‡∏£‡πå‡∏î",
                Duration = 5
            })
        else
            Fluent:Notify({
                Title = "Macro System",
                Content = "üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
                Duration = 3
            })
        end
        return true
    else
        Fluent:Notify({
            Title = "Macro System",
            Content = "‚ùå ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: " .. tostring(result),
            Duration = 5
        })
        return false
    end
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
local function loadMacro(filename)
    if not filename or filename == "" then
        Fluent:Notify({
            Title = "Macro System",
            Content = "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå!",
            Duration = 3
        })
        return false
    end
    
    local success, result = pcall(function()
        if readfile then
            local fullPath = SUB_FOLDER .. "/" .. filename .. ".json"
            if not isfile then
                -- ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ isfile ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á readfile ‡πÇ‡∏î‡∏¢‡∏à‡∏±‡∏ö error ‡πÅ‡∏ó‡∏ô
                local content = readfile(fullPath)
                local data = HttpService:JSONDecode(content)
                return data
            else
                if not isfile(fullPath) then
                    return nil, "‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏û‡∏ö"
                end
                local content = readfile(fullPath)
                local data = HttpService:JSONDecode(content)
                return data
            end
        else
            return nil, "‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö"
        end
    end)
    
    if success and result then
        macroData = result.macroData or {}
        eventsCount = #macroData
        durationTime = result.totalDuration or 0
        
        -- ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI
        if Tabs.Main then
            pcall(function()
                Tabs.Main:GetChildren()[1]:GetChildren()[1]:GetChildren()[2]:SetValue(
                    string.format("üìä Events: %d\n‚è±Ô∏è Duration: %.3fs\nüîó Hook: Active ‚úì", eventsCount, durationTime)
                )
            end)
        end
        
        Fluent:Notify({
            Title = "Macro System",
            Content = "‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
            Duration = 3
        })
        return true
    else
        Fluent:Notify({
            Title = "Macro System",
            Content = "‚ùå ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: " .. tostring(result),
            Duration = 5
        })
        return false
    end
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå ATGHUB_Macro/Anime Last Stand
local function getMacroFiles()
    ensureMacroFolders()
    if not listfiles then return {"‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå"} end
    
    local files = {}
    local success, result = pcall(function()
        local all = listfiles(SUB_FOLDER)
        for _, file in pairs(all) do
            -- ‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Å‡πà‡∏≠‡∏ô .json
            local name = file:match("([^/\\]+)%.json$")
            if name and name ~= "" then
                table.insert(files, name)
            end
        end
        return files
    end)
    
    if success and #files > 0 then
        return result
    else
        return {"‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ"}
    end
end

-- ‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö Main
do
    -- Input ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
    local Section = Tabs.Macro:AddSection("Macro")
    FilenameInput = Tabs.Macro:AddInput("FilenameInput", {
        Title = "‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå",
        Default = "",
        Placeholder = "‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ .json)",
        Numeric = false,
        Finished = false,
    })

    -- Dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå
    FileDropdown = Tabs.Macro:AddDropdown("FileDropdown", {
        Title = "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£",
        Values = getMacroFiles(),
        Multi = false,
        Default = 1,
    })

    -- Button ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå
    Tabs.Macro:AddButton({
        Title = "üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£",
        Description = "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå",
        Callback = function()
            local filename = Options.FilenameInput.Value
            if filename == "" then
                filename = os.date("macro_%Y%m%d_%H%M%S")
            end
            saveMacro(filename)
            
            -- ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó dropdown
            pcall(function()
                FileDropdown:SetValues(getMacroFiles())
            end)
        end
    })

    -- Toggle ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£
    local RecordToggle = Tabs.Macro:AddToggle("RecordToggle", {
        Title = "‚è∫Ô∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£",
        Description = "‡πÄ‡∏£‡∏¥‡πà‡∏°/‡∏´‡∏¢‡∏∏‡∏î ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£",
        Default = false
    })

    RecordToggle:OnChanged(function()
        if Options.RecordToggle.Value then
            -- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            if not hookInstalled then
                if not installHook() then
                    Fluent:Notify({
                        Title = "Macro System",
                        Content = "‚ùå ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Hook ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
                        Duration = 3
                    })
                    RecordToggle:SetValue(false)
                    return
                end
            end
            
            recording = true
            macroData = {}
            startTime = tick()
            eventsCount = 0
            durationTime = 0
            
            Fluent:Notify({
                Title = "Macro System",
                Content = "üé¨ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£‡πÅ‡∏•‡πâ‡∏ß",
                Duration = 2
            })
        else
            -- ‡∏´‡∏¢‡∏∏‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            recording = false
            Fluent:Notify({
                Title = "Macro System",
                Content = string.format("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: %d events", #macroData),
                Duration = 3
            })
        end
    end)

    -- Toggle ‡πÄ‡∏•‡πà‡∏ô‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    local AutoPlayToggle = Tabs.Macro:AddToggle("AutoPlayToggle", {
        Title = "üîÅ ‡πÄ‡∏•‡πà‡∏ô‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
        Description = "‡πÄ‡∏•‡πà‡∏ô‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î",
        Default = false
    })

    AutoPlayToggle:OnChanged(function()
        if Options.AutoPlayToggle.Value then
            if not playing then
                playMacro(true)
                Fluent:Notify({
                    Title = "Macro System",
                    Content = "üîÅ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£‡πÅ‡∏ö‡∏ö‡∏ß‡∏ô‡∏•‡∏π‡∏õ",
                    Duration = 2
                })
            end
        else
            looping = false
            playing = false
            Fluent:Notify({
                Title = "Macro System",
                Content = "‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡πà‡∏ô‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£",
                Duration = 2
            })
        end
    end)

    -- Button ‡πÄ‡∏•‡πà‡∏ô‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£
    Tabs.Macro:AddButton({
        Title = "‚ñ∂Ô∏è ‡πÄ‡∏•‡πà‡∏ô‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£",
        Description = "‡πÄ‡∏•‡πà‡∏ô‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏≠‡∏ö",
        Callback = function()
            if playing then
                Fluent:Notify({
                    Title = "Macro System",
                    Content = "‚è∏Ô∏è ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡πà‡∏ô‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß",
                    Duration = 2
                })
                playing = false
                looping = false
                Options.AutoPlayToggle:SetValue(false)
            else
                playMacro(false)
                Fluent:Notify({
                    Title = "Macro System",
                    Content = "‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏≠‡∏ö",
                    Duration = 2
                })
            end
        end
    })

    -- Button ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
    Tabs.Macro:AddButton({
        Title = "üìÇ ‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£",
        Description = "‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå",
        Callback = function()
            local selectedFile = Options.FileDropdown.Value
            if selectedFile and selectedFile ~= "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ" and selectedFile ~= "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå" then
                loadMacro(selectedFile)
            else
                Fluent:Notify({
                    Title = "Macro System",
                    Content = "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
                    Duration = 3
                })
            end
        end
    })

    -- Button ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    Tabs.Macro:AddButton({
        Title = "üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
        Description = "‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
        Callback = function()
            macroData = {}
            eventsCount = 0
            durationTime = 0
        end
    })
end

do
    Tabs.Macro:AddButton({
        Title = "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå",
        Description = "‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤‡πÇ‡∏Ñ‡∏£ (‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå ATGHUB_Macro/Anime Last Stand)",
        Callback = function()
            pcall(function()
                FileDropdown:SetValues(getMacroFiles())
            end)
            Fluent:Notify({
                Title = "Macro System",
                Content = "üîÑ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß",
                Duration = 2
            })
        end
    })
end
